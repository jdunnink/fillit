

grid coordinate template:

     0    1    2    3    4
---------------------------------
0   0,0  1,0  2,0  3,0  4,0    

1   0,1  1,1  2,1  3,1  4,1

2   0,2  1,2  2,2  3,2  4,2

3   0,3  1,3  2,3  3,3  4,3

4   0,4  1,4  2,4  3,4  4,4


the 19 distinct valid tetrominos:                               valid tetrominos as shown by number of obstacles from top left.     valid tetrominos as shown by number of sides touching    

1.  #...   2.  ####    3.  ##..    4.  #...    5.  ##..        1.  1111    2.  1234    3.  1222    4.  1111    5.  1222                 1.  1000    2.  1221
    #...       ....        ##..        #...        .#..            2222        1234        2444        2222        1333                     2000        
    #...       ....        ....        ##..        .#..            3333        1234        2444        3444        1444                     2000
    #...       ....        ....        ....        ....            4444        1234        2444        3444        1444                     1000

6.  ###.    7.  ..#.    8.  ##..    9.  .#..    10. .###        6.  1233    7.  0001    8.  1222    9.  0111    10. 0123
    #...        ###.        #...        .#..        ...#            2344        0124        2333        0222        0124
    ....        ....        #...        ##..        ....            2344        0124        3444        1444        0124
    ....        ....        ....        ....        ....            2344        0124        3444        1444        0124

11. #...    12. #...    13. .##.    14. .#..    15. ##..        11. 1111    12. 1111    13. 0122    14. 0111    15. 1222  
    ###.        ##..        ##..        ##..        .##.            2344        2333        1344        1333        1344
    ....        .#..        ....        #...        ....            2344        2444        1344        2444        1344
    ....        ....        ....        ....        ....            2344        2444        1344        2444        1344

16. .#..    17. .#..    18  #...    19. ###.                    16. 0111    17. 0111    18. 1111    19. 1233
    ###.        ##..        ##..        .#..                        1244        1333        2333        1344
    ....        .#..        #...        ....                        1244        1444        3444        1344
    ....        ....        ....        ....                        1244        1444        3444        1344



valid tetriminos are characterized by connection, each tetromino is connected to every other tetromino in the square.

connection is either completely sequential as is the case for 1 through 15, or the second to last node is connected to two tetros, as is the case for 16 through 19.

Apart from other checks (newlines, size, etc.), this implies a two-pronged approach to ultimately validating the different inputs.

    - check for options 1 through 15 (from the first node, go to the next connecting node, until 4 are found) anything other than 4 is false.
    - for all the options that fail the first check,
            run check 2 -->(from the first node, go to the next node, until 3 are found, then check for two new connecting nodes)



connected nodes are characterized by the same x or y, while the other x or y differs by not more than 1. for example,

--> node (x == 1, y == 3) is connected to node (x == 2, y == 3)  --> x differs by 1, while y is the same.
--> node (x == 1, y == 3) is connected to node (x == 1, y == 2)  --> x is the same, while y differs by 1.






definition of a connecting node (psuedocode):

    if (node2(x) == node1(x) && (node2(y) == node1(y - 1) || node2(y) == node1(y + 1)))
        node 2 is connected to node 1;
    else if (node2(y) == node1(y) && (node2(x) == node1(x - 1) || node2(x) == node1(x + 1)))
        node 2 is connected to node 2;






a next connected node is a connected node, that does not have the exact same coordinates as the other connecting node.

definition of a new connecting node (psuedocode):

    if (node2(x) == node1(x) && (node2(y) == node1(y - 1) || node2(y) == node1(y + 1)))
    {
        if (node2(x,y) != node3(x,y))
            node 2 is connected to node 1, and is unequal to node 3(other connection);
    }
    else if (node2(y) == node1(y) && (node2(x) == node1(x - 1) || node2(x) == node1(x + 1)))
    {
        if (node2(x,y) != node3(x,y))
            node 2 is connected to node 2, and is unequal to node 3(other connection);
    }





During the second check, while at the second node, control will reach a node with three connections, in this case, the new connection should be compared to two existing nodes.

definition of a new connecting node (psuedocode), with two existing connections:

    if (node2(x) == node1(x) && (node2(y) == node1(y - 1) || node2(y) == node1(y + 1)))
    {
        if (node2(x,y) != node3(x,y) && node2(x,y) != node4(x,y))
            node 2 is connected to node 1, and is unequal to node 3 and node 4;
    }
    else if (node2(y) == node1(y) && (node2(x) == node1(x - 1) || node2(x) == node1(x + 1)))
    {
        if (node2(x,y) != node3(x,y) && node2(x,y) != node4(x,y))
            node 2 is connected to node 2, and is unequal to node 3 and node 4;
    }



definition of a valid sequential tetromino (psuedocode):

if(node(1) has 1 connection)
    goto node2;
if(node2 has 2 connections)
    goto node3;
if (node3 has 2 connections)
    goto node4;
if (node4 has one connection)
    tetromino is valid.

definition of a valid non-sequential tetromino (psuedocode);

if (node 1 has one connection)
    goto node2;
if (node2 has three connections)
    goto node3A
if (node3A has one connection)
    goto node3B;
if (node3B has one connection)
    tetromino is valid.


in all cases, the size of the 2D array should always be 4x4 (excluding newlines, terminating zeros, etc.) and the number of connected nodes in a tetro should always be equal to 4.